// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RobotNeverDie

// Description:
// An collection of moving averages used in the code base. [1]
// * alma - Arnaud Legoux Moving Average
// * cvwma - Coefficient of Variation Weighted Moving Average https://www.tradingview.com/script/0dBtJvhu-Stratus-DW/
// * dema - Double Exponential Moving Average
// * donchian - Donchian Middle Channel
// * ecema - Error Corrected EMA http://www.mesasoftware.com/papers/ZeroLag.pdf
// * ema - Exponential Moving Average
// * frama - Fractal Adaptive Moving Average http://www.mesasoftware.com/papers/FRAMA.pdf
// * hull - Hull Moving Average
// * jma - Jurik Moving Average https://www.tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/
// * kama - Kaufman Adaptive Moving Average
// * lsma - Least Square Moving Average
// * mcginley - McGinley Dynamic
// * modframa - Modified Fractal Adaptive Moving Average http://etfhq.com/blog/2010/09/30/fractal-adaptive-moving-average-frama/#Mod
// * rma - Running Moving Average https://en.wikipedia.org/wiki/Moving_average#Modified_moving_average
// * sma - Simple Moving Average
// * smma - Smoothed Moving Average
// * supersmoother - SuperSmoother Filter http://www.mesasoftware.com/papers/PredictiveIndicatorsForEffectiveTrading%20Strategies.pdf
// * tema - Triple Exponential Moving Average
// * vama - Volatility Adjusted Moving Average https://www.tradingview.com/script/ZHGCH1jf-Volatility-Adjusted-Moving-Average-JD/
// * vidya - Variable Index Dynamic Average https://www.tradingview.com/script/hdrf0fXV-Variable-Index-Dynamic-Average-VIDYA/
// * vwma - Volume-Weighted Moving Average
// * wma - Weighted Moving Average
// * zlema - Zero Lag Exponential Moving Average https://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm
//
// References/Notes:
// [1] TradingView will slow down when their is a long chain of if/else statement, so have to split MA function.
//
// More at https://github.com/robotneverdie-algo/Pine-Script

//{=============================================================================== Moving Average Functions ================================================================================}

// Coefficient of Variation Weighted Moving Average https://www.tradingview.com/script/0dBtJvhu-Stratus-DW/
cvwma(x, len) =>
    cv = stdev(x, len) / sma(x, len)
    w = x * cv
    sum(w, len) / sum(cv, len)

// Double Exponential Moving Average
dema(x, len) =>
    e = ema(x, len)
    2 * e - ema(e, len)

// Donchian Middle Channel
donchian(len) =>
    avg(lowest(len), highest(len))

// Error Corrected EMA http://www.mesasoftware.com/papers/ZeroLag.pdf
ecema(x, len, limit) =>
    a = 2 / (len + 1)
    e = 0.0
    e := a * x + (1 - a) * nz(e[1])
    ec = 0.0
    least_error = 1000000.0
    best_gain = 0.0
    for i = -limit to limit
        gain = i / 10
        ec := a * (e + gain * (x - ec[1])) + (1 - a) * nz(ec[1])
        error = x - ec
        if abs(error) < least_error
            least_error := abs(error)
            best_gain := gain
    ec := a * (e + best_gain * (x - nz(ec[1]))) + (1 - a) * nz(ec[1])

// clamp a number in an range
clamp(x, xmin, xmax) =>
    max(min(x, xmax), xmin)

// Fractal Adaptive Moving Average http://www.mesasoftware.com/papers/FRAMA.pdf
frama(x, len) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    a = exp(-4.6 * (d - 1))
    alpha = clamp(nz(a), 0.01, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Hull Moving Average
hull(x, len) =>
    wma(2 * wma(x, len / 2) - wma(x, len), round(sqrt(len)))

// Jurik Moving Average https://www.tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/
jma(x, len, phase, power) =>
    // Copyright (c) 2007-present Jurik Research and Consulting. All rights reserved.
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    ratio = phase < -100 ? 0.5 : phase > 100 ? 2.5 : phase / 100 + 1.5
    beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
    alpha = pow(beta, power)
    j = 0.0
    e0 = 0.0
    e1 = 0.0
    e2 = 0.0
    e0 := (1 - alpha) * x + alpha * nz(e0[1])
    e1 := (x - e0) * (1 - beta) + beta * nz(e1[1])
    e2 := (e0 + ratio * e1 - nz(j[1])) * pow(1 - alpha, 2) + pow(alpha, 2) * nz(e2[1])
    j := e2 + nz(j[1])
    j

// Kaufman Adaptive Moving Average
kama(x, len, fast, slow) =>
    f = 2 / (fast + 1)
    s = 2 / (slow + 1)
    change = abs(change(x, len))
    volatility = sum(abs(change(x)), len)
    er = change / volatility
    sc = pow(er * (f - s) + s, 2)
    k = 0.0
    k := nz(k[1], sma(x, len)) + sc * (x - nz(k[1], sma(x, len)))
    k

// Least Square Moving Average
lsma(x, len, offset) =>
   linreg(x, len, offset)

// McGinley Dynamic
mcginley(x, len, factor) =>
    md = 0.0
    md := na(md[1]) ? x : md[1] + (x - md[1]) / (factor * len * pow(x / md[1], 4))
    md

// Modified Fractal Adaptive Moving Average http://etfhq.com/blog/2010/09/30/fractal-adaptive-moving-average-frama/#Mod
modframa(x, len, fast, slow) =>
    half = int(len / 2)
    hh1 = for i = 1 to half
        max(high[i], high[i-1])
    ll1 = for i = 1 to half
        min(low[i], low[i-1])

    hh2 = for i = half + 1 to len
        max(high[i], high[i-1])
    ll2 = for i = half + 1 to len
        min(low[i], low[i-1])

    hh3 = for i = 1 to len
        max(high[i], high[i-1])
    ll3 = for i = 1 to len
        min(low[i], low[i-1])

    n1 = (hh1 - ll1) / half
    n2 = (hh2 - ll2) / half
    n3 = (hh3 - ll3) / len
    d = 0.0
    d := iff(n1 > 0 and n2 > 0 and n3 > 0, (log(n1 + n2) - log(n3)) / log(2), clamp(nz(d[1]), 1, 2))
    w = 2 / (slow + 1)
    olda = exp(log(w) * (d - 1))
    n = (2 - olda) / olda
    nn = (slow - fast) * (n - 1) / (slow - 1) + fast
    a = 2 / (nn + 1)
    alpha = clamp(nz(a), w, 1)
    f = 0.0
    f := iff(bar_index > len + 1, alpha * x + (1 - alpha) * f[1], x)
    f

// Smoothed Moving Average
smma(x, len) =>
    s = sma(x, len)
    s := (sum(x, len) - nz(s[1]) + x) / len
    s

// SuperSmoother Filter http://www.mesasoftware.com/papers/PredictiveIndicatorsForEffectiveTrading%20Strategies.pdf
supersmoother(x, len) =>
    pi = 3.14159
    y = exp(-sqrt(2) * pi / len)

    c = -y * y
    b = 2.0 * y * cos(sqrt(2) * pi / len)
    a = 1 - b - c

    z = 0.0
    z := iff(bar_index == 0, 0.0, iff(bar_index == 1, b * nz(z[1]), iff(bar_index == 2,  b * nz(z[1]) + c * nz(z[2]), a * ((x + nz(x[1])) / 2) + b * nz(z[1]) + c * nz(z[2]))))
    z

// Triple Exponential Moving Average
tema(x, len) =>
    e1 = ema(x, len)
    e2 = ema(e1, len)
    e3 = ema(e2, len)
    (3 * e1) - (3 * e2) + e3

// Volatility Adjusted Moving Average https://www.tradingview.com/script/ZHGCH1jf-Volatility-Adjusted-Moving-Average-JD/
vama(x, len, lookback) =>
    // © Copyright 2019 to present, Joris Duyck (JD)
    mean = ema(x, len)
    diff = x - mean
    up = highest(diff, lookback)
    down = lowest(diff, lookback)
    mean + avg(up, down)

// Variable Index Dynamic Average https://www.tradingview.com/script/hdrf0fXV-Variable-Index-Dynamic-Average-VIDYA/
vidya(x, len, ema_len) =>
    // Copyright (c) 2018-present, Alex Orekhov (everget)
    diff = change(x, len)
    up = diff > 0 ? diff : 0.0
    down  = diff < 0 ? abs(diff) : 0.0
    cmo = abs((cum(up) - cum(down)) / (cum(up) + cum(down)))
    a = 2 / (ema_len + 1)
    v = 0.0
    v := x * a * cmo + nz(v[1]) * (1 - a * cmo)
    v

// Zero Lag Exponential Moving Average https://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm
zlema(x, len) =>
    a = 2 / (len + 1)
    lag = (len - 1) / 2
    e = 0.0
    e := a * (2 * x - x[lag]) + (1 - a) * nz(e[1])
    e

//{================================================================================ Moving Average Setting =================================================================================}

_ma_type = input("sma", options=["alma", "cvwma", "dema", "donchian", "ecema", "ema", "frama", "hull", "jma", "kama", "lsma", "mcginley", "modframa", "rma", "sma", "smma", "supersmoother", "tema", "vama", "vidya", "vwma", "wma", "zlema"], title="Moving Average: Type")
_ma_len = input(20, title="Moving Average: Length")

_alma_offset = input(0.8, step=0.01, minval=0.0, maxval=1.0, title="alma: offset")
_alma_sigma = input(10, title="alma: sigma")
_ecema_limit = input(50, title="ecema: gain limit")
_jma_phase = input(50, title="jma: phase")
_jma_power = input(2, title="jma: power")
_kama_fast = input(2, title="kama: fast")
_kama_slow = input(30, title="kama: slow")
_lsma_offset = input(0, minval=0, title="lsma: offset")
_mcginley_factor = input(0.6, step=0.01, minval=0.0, maxval=1.0, title="mcginley: smoothing factor")
_modframa_fast = input(1, title="modframa: fast")
_modframa_slow = input(198, title="modframa: slow")
_vama_lookback = input(50, title="vama: fast")
_vidya_len = input(30, title="vidya: ema length")

moving_average1(src, type, len) =>
    if type == "modframa"
        modframa(src, len, _modframa_fast, _modframa_slow)
    else
        if type == "rma"
            rma(src, len)
        else
            if type == "sma"
                sma(src, len)
            else
                if type == "smma"
                    smma(src, len)
                else
                    if type == "supersmoother"
                        supersmoother(src, len)
                    else
                        if type == "tema"
                            tema(src, len)
                        else
                            if type == "vama"
                                vama(src, len, _vama_lookback)
                            else
                                if type == "vidya"
                                    vidya(src, len, _vidya_len)
                                else
                                    if type == "vwma"
                                        vwma(src, len)
                                    else
                                        if type == "wma"
                                            wma(src, len)
                                        else
                                            zlema(src, len)

moving_average(src, type, len) =>
    if type == "alma"
        alma(src, len, _alma_offset, _alma_sigma)
    else
        if type == "cvwma"
            cvwma(src, len)
        else
            if type == "dema"
                dema(src, len)
            else
                if type == "donchian"
                    donchian(len)
                else
                    if type == "ecema"
                        ecema(x, len, _ecema_limit)
                    else
                        if type == "ema"
                            ema(src, len)
                        else
                            if type == "frama"
                                frama(src, len)
                            else
                                if type == "hull"
                                    hull(src, len)
                                else
                                    if type == "jma"
                                        jma(src, len, _jma_phase, _jma_power)
                                    else
                                        if type == "kama"
                                            kama(src, len, _kama_fast, _kama_slow)
                                        else
                                            if type == "lsma"
                                                lsma(src, len, _lsma_offset)
                                            else
                                                if type == "mcginley"
                                                    mcginley(src, len, _mcginley_factor)
                                                else
                                                    moving_average1(src, type, len)

_ma = moving_average(src, _ma_type, _ma_len)
